/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


#define DEFAULT 0
#define NUM     1

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS) \
  combo_##NAME { \
    timeout-ms = <80>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
  };

&mt {
  tapping-term-ms = <170>;
  quick-tap-ms = <80>;
  flavor = "balanced";
};


/ {
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <170>;
      quick-tap-ms = <130>;
      flavor = "balanced";
      bindings = <&kp>, <&kp>;
    };

    tdTabE: Tab_Esc {
      compatible = "zmk,behavior-tap-dance";
      label = "tabe";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp TAB>, <&kp ESC>;
    };

    tdQN1: Q_N1 {
      compatible = "zmk,behavior-tap-dance";
      label = "qn1";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp Q>, <&kp N1>;
    };

    tdWN2: W_N2 {
      compatible = "zmk,behavior-tap-dance";
      label = "wn2";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp W>, <&kp N2>;
    };

    tdEN3: E_N3 {
      compatible = "zmk,behavior-tap-dance";
      label = "en3";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp E>, <&kp N3>;
    };

    tdRN4: R_N4 {
      compatible = "zmk,behavior-tap-dance";
      label = "rn4";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp R>, <&kp N4>;
    };

    tdTN5: T_N5 {
      compatible = "zmk,behavior-tap-dance";
      label = "tn5";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp T>, <&kp N5>;
    };

    tdYN6: Y_N6 {
      compatible = "zmk,behavior-tap-dance";
      label = "yn6";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp Y>, <&kp N6>;
    };

    tdUN7: U_N7 {
      compatible = "zmk,behavior-tap-dance";
      label = "un7";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp U>, <&kp N7>;
    };

    tdIN8: I_N8 {
      compatible = "zmk,behavior-tap-dance";
      label = "in8";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp I>, <&kp N8>;
    };

    tdUpON9: O_N9 {
      compatible = "zmk,behavior-tap-dance";
      label = "on9";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&mt UP O>, <&kp N9>;
    };

    tdPN0: P_N0 {
      compatible = "zmk,behavior-tap-dance";
      label = "pn0";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp P>, <&kp N0>;
    };

    tdDelBslh: DEL_BSLASH {
      compatible = "zmk,behavior-tap-dance";
      label = "delbslh";
      #binding-cells = <0>;
      tapping-term-ms = <300>;
      bindings = <&kp BSPC>, <&kp DEL>, <&kp BSLH>;
    };

    tdAMinus: A_MINUS {
      compatible = "zmk,behavior-tap-dance";
      label = "aminus";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp A>, <&kp MINUS>;
    };

    tdSPlus: s_PLUS {
      compatible = "zmk,behavior-tap-dance";
      label = "splus";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp S>, <&kp EQUAL>;
    };

    tdDLeft: d_LEFT {
      compatible = "zmk,behavior-tap-dance";
      label = "dleft";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp D>, <&kp LEFT>;
    };

    tdFSpace: F_SPACE {
      compatible = "zmk,behavior-tap-dance";
      label = "fspace";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp F>, <&kp SPACE>;
    };

    tdGDown: g_DOWN {
      compatible = "zmk,behavior-tap-dance";
      label = "gdown";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp G>, <&kp DOWN>;
    };

    tdHUp: h_UP {
      compatible = "zmk,behavior-tap-dance";
      label = "hup";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp H>, <&kp UP>;
    };

    tdLeftJSpace: j_SPACE {
      compatible = "zmk,behavior-tap-dance";
      label = "jspace";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&mt LEFT SPACE>, <&kp J>;
    };

    tdLeftKRight: k_RIGHT {
      compatible = "zmk,behavior-tap-dance";
      label = "kright";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&mt LEFT K>, <&kp RIGHT>;
    };

    tdDownLSemi: l_SEMI {
      compatible = "zmk,behavior-tap-dance";
      label = "lsemi";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&mt DOWN L>, <&kp SEMI>;
    };

    tdRightAposGrave: APOS_GRAVE {
      compatible = "zmk,behavior-tap-dance";
      label = "semiapos";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&mt RIGHT APOS>, <&kp GRAVE>;
    };

    tdRshiftRet: RSHIFT_RET {
      compatible = "zmk,behavior-tap-dance";
      label = "rshiftret";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp RSHIFT>, <&kp RET>;
    };

    tdCXZ: z_x {
      compatible = "zmk,behavior-tap-dance";
      label = "cxz";
      #binding-cells = <0>;
      tapping-term-ms = <300>;
      bindings = <&kp C>, <&kp X>, <&kp Z>;
    };

    tdVSpace: v_SPACE {
      compatible = "zmk,behavior-tap-dance";
      label = "vspace";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp V>, <&kp SPACE>;
    };

    tdSpaceB: SPACE_b {
      compatible = "zmk,behavior-tap-dance";
      label = "spaceb";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp SPACE>, <&kp B>;
    };

    tdNSpace: n_SPACE {
      compatible = "zmk,behavior-tap-dance";
      label = "nspace";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp N>, <&kp SPACE>;
    };

    tdMSpace: m_SPACE{
      compatible = "zmk,behavior-tap-dance";
      label = "mspace";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp M>, <&kp SPACE>;
    };

    tdCommaLbkt: COMMA_LBKT{
      compatible = "zmk,behavior-tap-dance";
      label = "commalbkt";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp COMMA>, <&kp LBKT>;
    };

    tdDotBrkt: DOT_RBKT {
      compatible = "zmk,behavior-tap-dance";
      label = "dotbrkt";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&mt LEFT DOT>, <&kp RBKT>;
    };
 };
combos {
        compatible = "zmk,combos";
                      
      COMBO(fnOne, &kp F1, 1 11, DEFAULT NUM)
      COMBO(fTwo, &kp F2, 2 11, DEFAULT NUM)
      COMBO(fThree, &kp F3, 3 11, DEFAULT NUM)
      COMBO(fFour, &kp F4, 4 11, DEFAULT NUM)
      COMBO(fFive, &kp F5, 5 11, DEFAULT NUM)
      COMBO(fSix, &kp F6, 6 11, DEFAULT NUM)
      COMBO(fSeven, &kp F7, 7 0, DEFAULT NUM)
      COMBO(fEigth, &kp F8, 8 0, DEFAULT NUM)
      COMBO(fNine, &kp F9, 9 0, DEFAULT NUM)
      COMBO(fTen, &kp F10, 10 0, DEFAULT NUM)
      COMBO(fEleven, &kp F11, 11 0, DEFAULT NUM)
      COMBO(caps, &kp CAPS, 12 23, DEFAULT NUM)
      COMBO(btZero, &bt BT_SEL 0, 0 11 24 35, DEFAULT NUM)
      COMBO(btOne, &bt BT_SEL 1, 1 10 25 34, DEFAULT NUM)
      COMBO(btTwo, &bt BT_SEL 2, 2 9 26 33, DEFAULT NUM)
      COMBO(btThree, &bt BT_SEL 3, 3 27 8 32, DEFAULT NUM)
      COMBO(btFour, &bt BT_SEL 4, 4 28 7 31, DEFAULT NUM)
      COMBO(btClr, &bt BT_CLR, 5 6 29 30, DEFAULT NUM)
      COMBO(btOut, &out OUT_TOG, 17 18, DEFAULT NUM)
      COMBO(briDn, &kp C_BRI_DN, 0 1, DEFAULT NUM)
      COMBO(briUP, &kp C_BRI_UP, 1 2, DEFAULT NUM)
      COMBO(volDn, &kp C_VOL_DN, 9 10, DEFAULT NUM)
      COMBO(volUp, &kp C_VOL_UP, 10 11, DEFAULT NUM)
      COMBO(mut, &kp C_MUTE, 9 10 11, DEFAULT NUM)
      COMBO(space, &kp SPACE, 29 30, DEFAULT NUM)
      COMBO(dfltLyr, &to 0, 22 23, DEFAULT NUM)
      COMBO(numLyr, &to 1, 34 35, DEFAULT NUM)
    };


keymap {
    compatible = "zmk,keymap";	

  default_layer {
    bindings = <

&tdTabE     &tdQN1       &tdWN2      &tdEN3      &tdRN4      &tdTN5       &tdYN6       &tdUN7      &tdIN8      &tdUpON9       &tdPN0        &tdDelBslh
&sk LSHFT   &tdAMinus    &tdSPlus    &kp D    &mt SPACE F  &kp G    &kp H    &mt J Space  &tdLeftKRight   &tdDownLSemi    &tdRightAposGrave   &kp RET
&kp LCTRL   &kp LALT     &kp LGUI    &tdCXZ     &mt SPACE V   &mt SPACE B  &mt SPACE N  &mt SPACE M  &tdCommaLbkt  &tdDotBrkt   &kp FSLH   &sk RSHFT 

            >;
        };	

  Num_layer {
    bindings = <

&tdTabE     &kp N1         &kp N2        &kp N3     &kp N4      &kp N5      &kp N6      &kp N7      &kp N8      &mt UP N9        &kp N0        &kp DEL
&sk LSHFT   &kp MINUS     &kp EQUAL    &kp SPACE    &kp SPACE    &kp DOWN    &kp UP      &kp SPACE   &kp LEFT   &tdDownLSemi     &tdRightAposGrave   &kp RETURN	
&kp LCTRL   &kp LALT       &kp LGUI 	   &tdCXZ     &kp SPACE   &kp SPACE   &kp SPACE   &kp SPACE   &tdCommaLbkt  &tdDotBrkt    &kp FSLH     &sk RSHFT 

    >;
  };
 };
};
